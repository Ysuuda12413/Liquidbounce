package net.ccbluex.liquidbounce.features.module.modules.exploit

import net.ccbluex.liquidbounce.event.PacketEvent
import net.ccbluex.liquidbounce.event.UpdateEvent
import net.ccbluex.liquidbounce.event.handler
import net.ccbluex.liquidbounce.features.module.Category
import net.ccbluex.liquidbounce.features.module.Module
import net.minecraft.network.Packet
import net.minecraft.network.play.client.*
import java.util.*

object IntaveDisabler : Module(name = "IntaveDisabler", category = Category.EXPLOIT,) {
    private val delayedTransactions: Queue<Packet<*>> = LinkedList()
    private var lastKeepAlive = 0L
    private var lastMove = 0L
    private var lastTransactionSend = 0L
    private var lastAbilities = 0L
    private var ticks = 0

    // Delay ranges (randomized)
    private fun moveDelay() = (32L..58L).random()
    private fun keepAliveDelay() = (370L..570L).random()
    private fun txDelay() = (55L..138L).random()
    private fun abilitiesDelay() = (90L..170L).random()

    // Limit for batching ConfirmTransaction
    private fun txBatchSize() = (1..2).random()

    val onPacket = handler<PacketEvent> { event ->
        val packet = event.packet

        if (packet is C0FPacketConfirmTransaction) {
            if (delayedTransactions.size < 12) {
                delayedTransactions.add(packet)
            }
            event.cancelEvent()
        }

        if (packet is C13PacketPlayerAbilities) {
            if (packet.isFlying && !mc.thePlayer.capabilities.allowFlying) {
                event.cancelEvent()
            }
            if (System.currentTimeMillis() - lastAbilities < abilitiesDelay()) {
                event.cancelEvent()
            } else {
                lastAbilities = System.currentTimeMillis()
            }
        }

        if (packet is C00PacketKeepAlive) {
            if (System.currentTimeMillis() - lastKeepAlive < keepAliveDelay()) {
                event.cancelEvent()
            } else {
                lastKeepAlive = System.currentTimeMillis()
            }
        }

        if (packet is C03PacketPlayer) {
            if (System.currentTimeMillis() - lastMove < moveDelay()) {
                event.cancelEvent()
            } else {
                lastMove = System.currentTimeMillis()
            }
        }
    }

    val onUpdate = handler<UpdateEvent> {
        ticks++
        // Batch gửi ConfirmTransaction theo nhịp random và từng nhóm nhỏ
        if (delayedTransactions.isNotEmpty()) {
            val now = System.currentTimeMillis()
            if (now - lastTransactionSend > txDelay() && Math.random() > 0.30) {
                repeat(txBatchSize()) {
                    if (delayedTransactions.isNotEmpty())
                        mc.netHandler.addToSendQueue(delayedTransactions.poll())
                }
                lastTransactionSend = now
            }
        }
        if (delayedTransactions.size > 18) repeat((1..3).random()) { delayedTransactions.poll() }
    }

    override val tag: String
        get() = "Intave"
}